import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import skfuzzy as fuzz
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR
from sklearn.neighbors import KNeighborsRegressor
from sklearn.neural_network import MLPRegressor
from xgboost import XGBRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from statsmodels.stats.diagnostic import acorr_ljungbox
from statsmodels.tsa.stattools import adfuller
from scipy.stats import ttest_rel

def dm_test(errors1, errors2):
    diff = errors1 - errors2
    mean_diff = np.mean(diff)
    std_diff = np.std(diff, ddof=1)
    dm_stat = mean_diff / (std_diff / np.sqrt(len(diff)))
    p_value = 2 * (1 - abs(dm_stat))
    return dm_stat, p_value

# Load datase
data = pd.read_csv('/kaggle/input/mydata2020/Tetuan City power consumption.csv')
data['DateTime'] = pd.to_datetime(data['DateTime'])

# Sort data by DateTime to maintain temporal order
data = data.sort_values(by='DateTime')

# Prepare features (X) and target variable (y)
def create_lag_features(df, target_col, n_lags):
    for lag in range(1, n_lags + 1):
        df[f'{target_col}_lag_{lag}'] = df[target_col].shift(lag)
    return df

n_lags = 3  # Number of lag features
data = create_lag_features(data, 'Zone 3  Power Consumption', n_lags)
data = data.dropna()

# Select features (X) and target (y)
X = data[['Temperature', 'Humidity', 'Wind Speed', 'general diffuse flows',
          'Zone 3  Power Consumption_lag_1', 'Zone 3  Power Consumption_lag_2', 'Zone 3  Power Consumption_lag_3']]
y = data['Zone 3  Power Consumption']

# ------------------ Fuzzy C-Means Clustering ------------------
# Normalize the data for clustering
X_fuzzy = X.values.T
cntr, u, u0, d, jm, p, fpc = fuzz.cluster.cmeans(X_fuzzy, c=3, m=2, error=0.005, maxiter=1000, init=None)

# Extract the fuzzy memberships and append them as features
u = u.T  # Transpose for easier column appending
X['fuzzy_cluster_1'] = u[:, 0]
X['fuzzy_cluster_2'] = u[:, 1]
X['fuzzy_cluster_3'] = u[:, 2]

# Split data into training and testing sets
train_size = int(0.7 * len(data))
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]

# Standardize the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# ------------------ Time Series Machine Learning Models ------------------

# Random Forest
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train_scaled, y_train)
y_pred_rf = rf.predict(X_test_scaled)

# SVM (Support Vector Regressor)
svm = SVR(C=1.0, gamma='scale')
svm.fit(X_train_scaled, y_train)
y_pred_svm = svm.predict(X_test_scaled)

# KNN (K-Nearest Neighbors Regressor)
knn = KNeighborsRegressor(n_neighbors=5)
knn.fit(X_train_scaled, y_train)
y_pred_knn = knn.predict(X_test_scaled)

# XGBoost (Extreme Gradient Boosting Regressor)
xgb_model = XGBRegressor(n_estimators=100, random_state=42)
xgb_model.fit(X_train_scaled, y_train)
y_pred_xgb = xgb_model.predict(X_test_scaled)

# MLP Regressor (Multi-Layer Perceptron)
mlp = MLPRegressor(hidden_layer_sizes=(50, 50), max_iter=500, random_state=42)
mlp.fit(X_train_scaled, y_train)
y_pred_mlp = mlp.predict(X_test_scaled)

# ------------------ Evaluation Metrics ------------------

def calculate_metrics(y_test, y_pred):
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    return rmse, mae, r2

# Calculate metrics for all models
rmse_rf, mae_rf, r2_rf = calculate_metrics(y_test, y_pred_rf)
rmse_svm, mae_svm, r2_svm = calculate_metrics(y_test, y_pred_svm)
rmse_knn, mae_knn, r2_knn = calculate_metrics(y_test, y_pred_knn)
rmse_xgb, mae_xgb, r2_xgb = calculate_metrics(y_test, y_pred_xgb)
rmse_mlp, mae_mlp, r2_mlp = calculate_metrics(y_test, y_pred_mlp)

# ------------------ Plotting RMSE, MAE, and R-squared ------------------

models = ['Random Forest', 'SVM', 'KNN', 'XGBoost', 'MLP']
rmse_values = [rmse_rf, rmse_svm, rmse_knn, rmse_xgb, rmse_mlp]
mae_values = [mae_rf, mae_svm, mae_knn, mae_xgb, mae_mlp]
r2_values = [r2_rf, r2_svm, r2_knn, r2_xgb, r2_mlp]

# Plot RMSE
plt.figure(figsize=(10,6))
plt.bar(models, rmse_values, color='skyblue')
plt.title('RMSE of Time Series Models with Fuzzy C-Means')
plt.ylabel('RMSE')
plt.show()

# Plot MAE
plt.figure(figsize=(10,6))
plt.bar(models, mae_values, color='salmon')
plt.title('MAE of Time Series Models with Fuzzy C-Means')
plt.ylabel('MAE')
plt.show()

# Plot R-squared
plt.figure(figsize=(10,6))
plt.bar(models, r2_values, color='lightgreen')
plt.title('R-squared of Time Series Models with Fuzzy C-Means')
plt.ylabel('R-squared')
plt.show()

# ------------------ Time Series Plot ------------------

plt.figure(figsize=(12,6))
plt.plot(data['DateTime'][train_size:], y_test, label='Actual Power Consumption', color='blue')
plt.plot(data['DateTime'][train_size:], y_pred_rf, label='Random Forest Predicted', color='red')
plt.plot(data['DateTime'][train_size:], y_pred_svm, label='SVM Predicted', color='green')
plt.plot(data['DateTime'][train_size:], y_pred_knn, label='KNN Predicted', color='purple')
plt.plot(data['DateTime'][train_size:], y_pred_xgb, label='XGBoost Predicted', color='orange')
plt.plot(data['DateTime'][train_size:], y_pred_mlp, label='MLP Predicted', color='cyan')
plt.xlabel('DateTime')
plt.ylabel('Power Consumption')
plt.title('Time Series Forecasting of Power Consumption (Zone 3)')
plt.legend()
plt.show()



y_preds = {'Random Forest': y_pred_rf,
    'SVM': y_pred_svm,
    'KNN': y_pred_knn,
    'XGBoost': y_pred_xgb,
    'MLP': y_pred_mlp}


# Print RMSE, MAE, and R-squared for each model
for model, rmse, mae, r2 in zip(models, rmse_values, mae_values, r2_values):
    print(f'{model}: RMSE = {rmse:.4f}, MAE = {mae:.4f}, R-squared = {r2:.4f}')

baseline_model = 'MLP'
for model_name in models:
    if model_name != baseline_model:
        dm_stat, p_value = dm_test(abs(y_test - y_preds[baseline_model]), abs(y_test - y_preds[model_name]))
        print(f"DM Test ({baseline_model} vs {model_name}): DM Stat = {dm_stat:.4f}, p-value = {p_value:.4f}")

